[{"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\App.js":"1","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\navbar\\index.js":"2","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\About\\style.js":"3","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\about\\style.js":"4","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\about\\index.js":"5","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\index.js":"6","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\skills\\style.js":"7","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\skills\\index.js":"8","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\project\\index.js":"9","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\project\\style.js":"10","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\contact\\style.js":"11","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\contact\\index.js":"12","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\navbar\\style.js":"13","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\pages\\about-page\\index.js":"14","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\pages\\project-page\\index.js":"15","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\pages\\404-page\\index.js":"16","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\pages\\404-page\\style.js":"17","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\pages\\project-page\\style.js":"18","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\responsive-navbar\\style.js":"19","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\responsive-navbar\\index.js":"20","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\pages\\contact-page\\index.js":"21","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\api\\api.js":"22","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\bottom-links\\index.js":"23","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\bottom-links\\style.js":"24"},{"size":1050,"mtime":1610118231778,"results":"25","hashOfConfig":"26"},{"size":1160,"mtime":1608477227770,"results":"27","hashOfConfig":"26"},{"size":496,"mtime":1607179269705,"results":"28","hashOfConfig":"26"},{"size":1328,"mtime":1614434100706,"results":"29","hashOfConfig":"26"},{"size":1258,"mtime":1615914064642,"results":"30","hashOfConfig":"26"},{"size":291,"mtime":1608372356206,"results":"31","hashOfConfig":"26"},{"size":1494,"mtime":1614434223695,"results":"32","hashOfConfig":"26"},{"size":700,"mtime":1607276217798,"results":"33","hashOfConfig":"26"},{"size":470,"mtime":1607283714289,"results":"34","hashOfConfig":"26"},{"size":671,"mtime":1617220529780,"results":"35","hashOfConfig":"26"},{"size":1692,"mtime":1614280161557,"results":"36","hashOfConfig":"26"},{"size":4189,"mtime":1612010728906,"results":"37","hashOfConfig":"26"},{"size":941,"mtime":1610118287546,"results":"38","hashOfConfig":"26"},{"size":266,"mtime":1608374748858,"results":"39","hashOfConfig":"26"},{"size":2397,"mtime":1617220280063,"results":"40","hashOfConfig":"26"},{"size":576,"mtime":1608477655966,"results":"41","hashOfConfig":"26"},{"size":650,"mtime":1608477646293,"results":"42","hashOfConfig":"26"},{"size":945,"mtime":1614280019209,"results":"43","hashOfConfig":"26"},{"size":2080,"mtime":1610118384747,"results":"44","hashOfConfig":"26"},{"size":637,"mtime":1610118120057,"results":"45","hashOfConfig":"26"},{"size":294,"mtime":1616174212984,"results":"46","hashOfConfig":"26"},{"size":110,"mtime":1612010439838,"results":"47","hashOfConfig":"26"},{"size":1169,"mtime":1616176413983,"results":"48","hashOfConfig":"26"},{"size":398,"mtime":1616181106390,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},"1aqpepl",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"73"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"53"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\App.js",["109"],"import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Navbar from \"./components/navbar/index\";\nimport ResponsiveNavbar, { Burger } from \"./components/responsive-navbar/index\";\nimport AboutPage from \"./pages/about-page/index\";\nimport ProjectPage from \"./pages/project-page/index\";\nimport ContactPage from \"./pages/contact-page/index\";\nimport NotFound from \"./pages/404-page/index\";\n\nimport './App.css';\n\nconst App = () => {\n  const [open, setOpen] = React.useState(false);\n  const node = React.useRef();\n   return (\n    <div className=\"App\">\n      <Navbar/>\n        <div ref={node}>\n          <Burger open={open} setOpen={setOpen} />\n          <ResponsiveNavbar open={open} setOpen={setOpen} />\n        </div>\n      <Switch>\n          <Route exact path=\"/\" component={AboutPage} />\n          <Route exact path=\"/projects\" component={ProjectPage} />\n          <Route exact path=\"/contact\" component={ContactPage} />\n          <Route component={NotFound} />\n      </Switch>\n    </div>\n  )\n};\n\nexport default App;\n",["110","111"],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\navbar\\index.js",[],["112","113"],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\About\\style.js",[],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\about\\style.js",[],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\about\\index.js",[],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\index.js",[],["114","115"],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\skills\\style.js",[],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\skills\\index.js",[],["116","117"],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\project\\index.js",[],["118","119"],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\project\\style.js",[],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\contact\\style.js",[],["120","121"],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\contact\\index.js",["122"],"import React from \"react\";\r\nimport API from \"../../api/api\";\r\nimport { ContactPageDivContainer, ContactTitle, ConctactTitleUnderline, ContactPageInput, ContactPageMessage, ContactCaptcha, ContactSpan, MessageSentAlert } from \"./style\";\r\n\r\nconst Contact = () => {\r\n    const [username, setUsername] = React.useState('');\r\n    const [email, setEmail] = React.useState('');\r\n    const [message, setMessage] = React.useState('');\r\n    const [messageSented, setMessageSented] = React.useState(false);\r\n    const [errorMessage, setErrorMessage] = React.useState('');\r\n    const [emailValidation, setEmailValidation] = React.useState('');\r\n    const [Value, setValue] = React.useState('');\r\n\r\n    const onChange = (value) => {\r\n        setValue(value);\r\n    };\r\n\r\n    const validateEmail = (email) => {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        setEmailValidation(re.test(String(email).toLowerCase()));\r\n        setEmail(email);\r\n    }\r\n\r\n    const submitRequest = async () => {\r\n        const contactData = {\r\n            username: username,\r\n            email: email,\r\n            message: message\r\n        };\r\n\r\n        if (username === \"\" && email === \"\" && message === \"\") {\r\n            setErrorMessage('The form is empty');\r\n        }\r\n        else if (username === \"\") {\r\n            setErrorMessage('Username is empty');\r\n        }\r\n        else if (email === \"\") {\r\n            setErrorMessage('Email is empty');\r\n        }\r\n        else if (!emailValidation) {\r\n            setErrorMessage('Invalid email');\r\n        }\r\n        else if (message === \"\") {\r\n            setErrorMessage('Message is empty');\r\n        }\r\n        else {\r\n            if (Value) {\r\n                setErrorMessage('');\r\n                API.post('/smtp/sendmail', contactData)\r\n                    .then(res => {\r\n                        setUsername('');\r\n                        setEmail('');\r\n                        setMessage('');\r\n                        setMessageSented(true);\r\n                    })\r\n            } else {\r\n                setErrorMessage('Captcha required');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ContactPageDivContainer>\r\n            {messageSented == true ? (\r\n                <MessageSentAlert>✅ Message sent</MessageSentAlert>\r\n            ) : (\r\n                    <>\r\n                        <ContactTitle>Contact</ContactTitle>\r\n                        <ConctactTitleUnderline />\r\n                        <div>\r\n                            <ContactPageInput\r\n                                type=\"username\"\r\n                                placeholder=\"Username\"\r\n                                value={username}\r\n                                onChange={e => setUsername(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <ContactPageInput\r\n                                type=\"email\"\r\n                                placeholder=\"Email\"\r\n                                value={email}\r\n                                onChange={e => validateEmail(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <ContactPageMessage\r\n                                value={message}\r\n                                placeholder=\"Message\"\r\n                                rows=\"5\"\r\n                                onChange={e => setMessage(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <ContactSpan>{errorMessage}</ContactSpan>\r\n                        <ContactCaptcha\r\n                            sitekey=\"6LdR6CYaAAAAAIA-PEqiHM8RqNEndngWJBKG0__u\"\r\n                            onChange={onChange}\r\n                        />\r\n                        <div>\r\n                            <button onClick={submitRequest}>Submit</button>\r\n                        </div>\r\n                    </>\r\n                )}\r\n\r\n        </ContactPageDivContainer>\r\n    )\r\n};\r\n\r\nexport default Contact;","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\navbar\\style.js",[],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\pages\\about-page\\index.js",[],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\pages\\project-page\\index.js",["123"],"import React from \"react\";\r\nimport Project from \"../../components/project/index\";\r\nimport { ProjectsContainer, ProjectsDiv, ProjectsTitle, ProjectsTitleUnderline } from \"./style\";\r\n\r\nconst ProjectPage = () => {\r\n    const [data, setData] = React.useState([\r\n        { name: \"iLaD\", description: \"My personal website.\", link: \"https://github.com/iLaD08/ilad\" },\r\n        { name: \"ShareCode\", description: \"An open source website that make developers share code with each other.\", link: \"https://github.com/ShareCode-org\" },\r\n        { name: \"RandomMeme\", description: \"A discord bot made to give people memes and make them happy!\", link: \"https://github.com/RandoMeme\"},\r\n        { name: \"Clothing store\", description: \"A e-commerce website template\", link: \"https://clothingstore.now.sh/\" },\r\n        { name: \"FL-Network\", description: \"A project that i made for my dad\", link: \"https://github.com/FL-Network\" },\r\n        { name: \"Protip\", description: \"A discord bot designed to give helpful advice.\", link: \"https://github.com/IMAD200\" },\r\n        { name: \"Todo app\", description: \"Todo App template by iLaD\", link: \"https://github.com/iLaD08/todo-app\" },\r\n        { name: \"Random Meme\", description: \"A web app that generate memes from reddit posts.\", link: \"https://github.com/iLaD08/random-meme\" },\r\n        { name: \"B3bola chat\", description: \"A simple real-time-chat app\", link: \"https://b3bola-chat.herokuapp.com/\" },\r\n        { name: \"Monster Rolodex\", description: \"My first React app\", link: \"https://monsters-rolodex.ilad08.now.sh/\" },\r\n        { name: \"Radio bot\", description: \"A Discord radio bot template.\", link: \"https://github.com/iLaD08/discord-radio-bot\" },\r\n        { name: \"D&L mode\", description: \"A dark and light mode template.\", link: \"https://github.com/iLaD08/dark-and-light-mode\" }\r\n    ]);\r\n\r\n    return (\r\n        <ProjectsContainer id=\"projects\">\r\n            <ProjectsTitle>Projects</ProjectsTitle>\r\n            <ProjectsTitleUnderline />\r\n            <ProjectsDiv>\r\n                {data.map((data, index) => (\r\n                    <Project\r\n                        key={index}\r\n                        name={data.name}\r\n                        description={data.description}\r\n                        link={data.link}\r\n                    />\r\n                ))}\r\n            </ProjectsDiv>\r\n        </ProjectsContainer>\r\n    )\r\n};\r\n\r\nexport default ProjectPage;","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\pages\\404-page\\index.js",[],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\pages\\404-page\\style.js",[],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\pages\\project-page\\style.js",[],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\responsive-navbar\\style.js",[],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\responsive-navbar\\index.js",[],["124","125"],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\pages\\contact-page\\index.js",[],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\api\\api.js",[],"C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\bottom-links\\index.js",["126"],"import React from \"react\";\r\nimport Instagram from \"../../assests/instagram.png\";\r\nimport Twitter from \"../../assests/twitter.png\";\r\nimport Github from \"../../assests/github.png\";\r\nimport { BottomLinksDivContainer, BottomLink, BottomLinkImg } from \"./style\";\r\n\r\nconst BottomLinks = () => {\r\n    const [links, setLinks] = React.useState([\r\n        { name: \"Github\", image: `${Github}`, link: \"https://github.com/iLaD08\" },\r\n        { name: \"Instagram\", image: `${Instagram}`, link: \"https://www.instagram.com/ilad.08/\" },\r\n        { name: \"Twitter\", image: `${Twitter}`, link: \"https://twitter.com/MrHunter2008\" }\r\n    ]);\r\n\r\n    return (\r\n        <BottomLinksDivContainer>\r\n            {links.map((link, index) => (\r\n                <BottomLink\r\n                    href={link.link}\r\n                    target=\"_blank\"\r\n                    key={index}>\r\n                    <BottomLinkImg\r\n                        src={`${link.image}`}\r\n                        alt={link.name}\r\n                        title={link.name}\r\n                    />\r\n                </BottomLink>\r\n            ))}\r\n        </BottomLinksDivContainer>\r\n    )\r\n};\r\n\r\nexport default BottomLinks;","C:\\Users\\lenovo\\Desktop\\Dev\\ilad\\src\\components\\bottom-links\\style.js",[],{"ruleId":"127","severity":1,"message":"128","line":2,"column":25,"nodeType":"129","messageId":"130","endLine":2,"endColumn":33},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"131","replacedBy":"135"},{"ruleId":"133","replacedBy":"136"},{"ruleId":"131","replacedBy":"137"},{"ruleId":"133","replacedBy":"138"},{"ruleId":"131","replacedBy":"139"},{"ruleId":"133","replacedBy":"140"},{"ruleId":"131","replacedBy":"141"},{"ruleId":"133","replacedBy":"142"},{"ruleId":"131","replacedBy":"143"},{"ruleId":"133","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":64,"column":28,"nodeType":"147","messageId":"148","endLine":64,"endColumn":30},{"ruleId":"127","severity":1,"message":"149","line":6,"column":18,"nodeType":"129","messageId":"130","endLine":6,"endColumn":25},{"ruleId":"131","replacedBy":"150"},{"ruleId":"133","replacedBy":"151"},{"ruleId":"127","severity":1,"message":"152","line":8,"column":19,"nodeType":"129","messageId":"130","endLine":8,"endColumn":27},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["153"],"no-negated-in-lhs",["154"],["153"],["154"],["153"],["154"],["153"],["154"],["153"],["154"],["153"],["154"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setData' is assigned a value but never used.",["153"],["154"],"'setLinks' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]