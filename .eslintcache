[{"/home/ilad/Dev/ilad/src/index.js":"1","/home/ilad/Dev/ilad/src/App.js":"2","/home/ilad/Dev/ilad/src/components/responsive-navbar/index.js":"3","/home/ilad/Dev/ilad/src/components/navbar/index.js":"4","/home/ilad/Dev/ilad/src/pages/about-page/index.js":"5","/home/ilad/Dev/ilad/src/pages/project-page/index.js":"6","/home/ilad/Dev/ilad/src/pages/contact-page/index.js":"7","/home/ilad/Dev/ilad/src/pages/404-page/index.js":"8","/home/ilad/Dev/ilad/src/components/responsive-navbar/style.js":"9","/home/ilad/Dev/ilad/src/components/navbar/style.js":"10","/home/ilad/Dev/ilad/src/pages/project-page/style.js":"11","/home/ilad/Dev/ilad/src/pages/404-page/style.js":"12","/home/ilad/Dev/ilad/src/components/about/index.js":"13","/home/ilad/Dev/ilad/src/components/skills/index.js":"14","/home/ilad/Dev/ilad/src/components/project/index.js":"15","/home/ilad/Dev/ilad/src/components/contact/index.js":"16","/home/ilad/Dev/ilad/src/components/bottom-links/index.js":"17","/home/ilad/Dev/ilad/src/components/about/style.js":"18","/home/ilad/Dev/ilad/src/components/skills/style.js":"19","/home/ilad/Dev/ilad/src/components/project/style.js":"20","/home/ilad/Dev/ilad/src/components/contact/style.js":"21","/home/ilad/Dev/ilad/src/components/bottom-links/style.js":"22","/home/ilad/Dev/ilad/src/api/api.js":"23"},{"size":291,"mtime":1618673181743,"results":"24","hashOfConfig":"25"},{"size":1050,"mtime":1618673181739,"results":"26","hashOfConfig":"25"},{"size":608,"mtime":1618673181743,"results":"27","hashOfConfig":"25"},{"size":1121,"mtime":1618673181743,"results":"28","hashOfConfig":"25"},{"size":345,"mtime":1618758454848,"results":"29","hashOfConfig":"25"},{"size":2289,"mtime":1618758363384,"results":"30","hashOfConfig":"25"},{"size":369,"mtime":1618758514568,"results":"31","hashOfConfig":"25"},{"size":561,"mtime":1618673181743,"results":"32","hashOfConfig":"25"},{"size":2001,"mtime":1618673181743,"results":"33","hashOfConfig":"25"},{"size":898,"mtime":1618673181743,"results":"34","hashOfConfig":"25"},{"size":901,"mtime":1618673181743,"results":"35","hashOfConfig":"25"},{"size":621,"mtime":1618673181743,"results":"36","hashOfConfig":"25"},{"size":1220,"mtime":1618673181743,"results":"37","hashOfConfig":"25"},{"size":680,"mtime":1618673181743,"results":"38","hashOfConfig":"25"},{"size":458,"mtime":1618673181743,"results":"39","hashOfConfig":"25"},{"size":4081,"mtime":1618673181743,"results":"40","hashOfConfig":"25"},{"size":1138,"mtime":1618673181743,"results":"41","hashOfConfig":"25"},{"size":1259,"mtime":1618673181743,"results":"42","hashOfConfig":"25"},{"size":1421,"mtime":1618673181743,"results":"43","hashOfConfig":"25"},{"size":643,"mtime":1618673181743,"results":"44","hashOfConfig":"25"},{"size":1626,"mtime":1618673952285,"results":"45","hashOfConfig":"25"},{"size":379,"mtime":1618673181743,"results":"46","hashOfConfig":"25"},{"size":106,"mtime":1618673181739,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10j3kgd",{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ilad/Dev/ilad/src/index.js",[],"/home/ilad/Dev/ilad/src/App.js",["97"],"import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Navbar from \"./components/navbar/index\";\nimport ResponsiveNavbar, { Burger } from \"./components/responsive-navbar/index\";\nimport AboutPage from \"./pages/about-page/index\";\nimport ProjectPage from \"./pages/project-page/index\";\nimport ContactPage from \"./pages/contact-page/index\";\nimport NotFound from \"./pages/404-page/index\";\n\nimport './App.css';\n\nconst App = () => {\n  const [open, setOpen] = React.useState(false);\n  const node = React.useRef();\n   return (\n    <div className=\"App\">\n      <Navbar/>\n        <div ref={node}>\n          <Burger open={open} setOpen={setOpen} />\n          <ResponsiveNavbar open={open} setOpen={setOpen} />\n        </div>\n      <Switch>\n          <Route exact path=\"/\" component={AboutPage} />\n          <Route exact path=\"/projects\" component={ProjectPage} />\n          <Route exact path=\"/contact\" component={ContactPage} />\n          <Route component={NotFound} />\n      </Switch>\n    </div>\n  )\n};\n\nexport default App;\n","/home/ilad/Dev/ilad/src/components/responsive-navbar/index.js",[],"/home/ilad/Dev/ilad/src/components/navbar/index.js",[],"/home/ilad/Dev/ilad/src/pages/about-page/index.js",[],"/home/ilad/Dev/ilad/src/pages/project-page/index.js",["98"],"/home/ilad/Dev/ilad/src/pages/contact-page/index.js",[],"/home/ilad/Dev/ilad/src/pages/404-page/index.js",[],"/home/ilad/Dev/ilad/src/components/responsive-navbar/style.js",[],"/home/ilad/Dev/ilad/src/components/navbar/style.js",[],"/home/ilad/Dev/ilad/src/pages/project-page/style.js",[],"/home/ilad/Dev/ilad/src/pages/404-page/style.js",[],"/home/ilad/Dev/ilad/src/components/about/index.js",[],"/home/ilad/Dev/ilad/src/components/skills/index.js",[],"/home/ilad/Dev/ilad/src/components/project/index.js",[],"/home/ilad/Dev/ilad/src/components/contact/index.js",["99"],"import React from \"react\";\nimport API from \"../../api/api\";\nimport { ContactPageDivContainer, ContactTitle, ConctactTitleUnderline, ContactPageInput, ContactPageMessage, ContactCaptcha, ContactSpan, MessageSentAlert } from \"./style\";\n\nconst Contact = () => {\n    const [username, setUsername] = React.useState('');\n    const [email, setEmail] = React.useState('');\n    const [message, setMessage] = React.useState('');\n    const [messageSented, setMessageSented] = React.useState(false);\n    const [errorMessage, setErrorMessage] = React.useState('');\n    const [emailValidation, setEmailValidation] = React.useState('');\n    const [Value, setValue] = React.useState('');\n\n    const onChange = (value) => {\n        setValue(value);\n    };\n\n    const validateEmail = (email) => {\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        setEmailValidation(re.test(String(email).toLowerCase()));\n        setEmail(email);\n    }\n\n    const submitRequest = async () => {\n        const contactData = {\n            username: username,\n            email: email,\n            message: message\n        };\n\n        if (username === \"\" && email === \"\" && message === \"\") {\n            setErrorMessage('The form is empty');\n        }\n        else if (username === \"\") {\n            setErrorMessage('Username is empty');\n        }\n        else if (email === \"\") {\n            setErrorMessage('Email is empty');\n        }\n        else if (!emailValidation) {\n            setErrorMessage('Invalid email');\n        }\n        else if (message === \"\") {\n            setErrorMessage('Message is empty');\n        }\n        else {\n            if (Value) {\n                setErrorMessage('');\n                API.post('/smtp/sendmail', contactData)\n                    .then(res => {\n                        setUsername('');\n                        setEmail('');\n                        setMessage('');\n                        setMessageSented(true);\n                    })\n            } else {\n                setErrorMessage('Captcha required');\n            }\n        }\n    };\n\n    return (\n        <ContactPageDivContainer>\n            {messageSented == true ? (\n                <MessageSentAlert>âœ… Message sent</MessageSentAlert>\n            ) : (\n                    <>\n                        <ContactTitle>Contact</ContactTitle>\n                        <ConctactTitleUnderline />\n                        <div>\n                            <ContactPageInput\n                                type=\"username\"\n                                placeholder=\"Username\"\n                                value={username}\n                                onChange={e => setUsername(e.target.value)}\n                            />\n                        </div>\n                        <div>\n                            <ContactPageInput\n                                type=\"email\"\n                                placeholder=\"Email\"\n                                value={email}\n                                onChange={e => validateEmail(e.target.value)}\n                            />\n                        </div>\n                        <div>\n                            <ContactPageMessage\n                                value={message}\n                                placeholder=\"Message\"\n                                rows=\"5\"\n                                onChange={e => setMessage(e.target.value)}\n                            />\n                        </div>\n                        <ContactSpan>{errorMessage}</ContactSpan>\n                        <ContactCaptcha\n                            sitekey=\"6LdR6CYaAAAAAIA-PEqiHM8RqNEndngWJBKG0__u\"\n                            onChange={onChange}\n                        />\n                        <div>\n                            <button onClick={submitRequest}>Submit</button>\n                        </div>\n                    </>\n                )}\n\n        </ContactPageDivContainer>\n    )\n};\n\nexport default Contact;","/home/ilad/Dev/ilad/src/components/bottom-links/index.js",["100"],"import React from \"react\";\nimport Instagram from \"../../assests/instagram.png\";\nimport Twitter from \"../../assests/twitter.png\";\nimport Github from \"../../assests/github.png\";\nimport { BottomLinksDivContainer, BottomLink, BottomLinkImg } from \"./style\";\n\nconst BottomLinks = () => {\n    const [links, setLinks] = React.useState([\n        { name: \"Github\", image: `${Github}`, link: \"https://github.com/iLaD08\" },\n        { name: \"Instagram\", image: `${Instagram}`, link: \"https://www.instagram.com/ilad.08/\" },\n        { name: \"Twitter\", image: `${Twitter}`, link: \"https://twitter.com/MrHunter2008\" }\n    ]);\n\n    return (\n        <BottomLinksDivContainer>\n            {links.map((link, index) => (\n                <BottomLink\n                    href={link.link}\n                    target=\"_blank\"\n                    key={index}>\n                    <BottomLinkImg\n                        src={`${link.image}`}\n                        alt={link.name}\n                        title={link.name}\n                    />\n                </BottomLink>\n            ))}\n        </BottomLinksDivContainer>\n    )\n};\n\nexport default BottomLinks;","/home/ilad/Dev/ilad/src/components/about/style.js",[],"/home/ilad/Dev/ilad/src/components/skills/style.js",[],"/home/ilad/Dev/ilad/src/components/project/style.js",[],"/home/ilad/Dev/ilad/src/components/contact/style.js",[],"/home/ilad/Dev/ilad/src/components/bottom-links/style.js",[],"/home/ilad/Dev/ilad/src/api/api.js",[],{"ruleId":"101","severity":1,"message":"102","line":2,"column":25,"nodeType":"103","messageId":"104","endLine":2,"endColumn":33},{"ruleId":"101","severity":1,"message":"105","line":6,"column":18,"nodeType":"103","messageId":"104","endLine":6,"endColumn":25},{"ruleId":"106","severity":1,"message":"107","line":64,"column":28,"nodeType":"108","messageId":"109","endLine":64,"endColumn":30},{"ruleId":"101","severity":1,"message":"110","line":8,"column":19,"nodeType":"103","messageId":"104","endLine":8,"endColumn":27},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'setData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setLinks' is assigned a value but never used."]